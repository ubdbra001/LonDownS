function framebyframeexport = func_importPCI(filename,codingType, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   FRAMEBYFRAMEEXPORT = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   FRAMEBYFRAMEEXPORT = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   framebyframeexport = importfile('framebyframe_export.csv', 2, 63903);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/08/24 11:10:50

%% Initialize variables.
delimiter = ',';
if nargin<=3
    startRow = 2;
    endRow = inf;
end


% For more information, see the TEXTSCAN documentation.

switch codingType
    case 1
        % Format string for each line of text:
        %   column1: double (%f)
        %	column2: double (%f)
        %   column3: double (%f)
        %	column4: double (%f)
        %   column5: text (%s)
        %	column6: text (%s)
        %   column7: text (%s)
        %	column8: double (%f)
        %   column9: double (%f)
        %	column10: double (%f)
        %   column11: text (%s)
        %	column12: text (%s)
        %   column13: text (%s)
        %	column14: double (%f)
        %   column15: double (%f)
        %	column16: double (%f)
        %   column17: text (%s)
        %	column18: text (%s)
        
        formatSpec = '%f%f%f%f%s%s%s%f%f%f%s%s%s%f%f%f%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';
        varNames = {'time','babyobjordinal','babyobjonset','babyobjoffset','babyobjobj1','babyobjobj2','babyobjobj3','parentobjordinal','parentobjonset','parentobjoffset','parentobjobj1','parentobjobj2','parentobjobj3','actionsordinal','actionsonset','actionsoffset','actionsbaby','actionsparent'};
    case 2
        % Format string for each line of text:
        %   column1: double (%f)
        %	column2: double (%f)
        %   column3: double (%f)
        %	column4: double (%f)
        %   column5: text (%s)
        %	column6: text (%s)
        %   column7: text (%s)
        %	column8: double (%f)
        %   column9: double (%f)
        %	column10: double (%f)
        %   column11: text (%s)
        %	column12: double (%f)
        %   column13: double (%f)
        %	column14: double (%f)
        %   column15: text (%s)
        %	column16: text (%s)
        %   column17: text (%s)
        %	column18: double (%f)
        %   column19: double (%f)
        %	column20: double (%f)
        %   column21: text (%s)
        
        formatSpec = '%f%f%f%f%s%s%s%f%f%f%s%f%f%f%s%s%s%f%f%f%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';
        varNames = {'time','babyobjordinal','babyobjonset','babyobjoffset','babyobjobj1','babyobjobj2','babyobjobj3','babyactionsordinal','babyactionsonset','babyactionsoffset','babyactionsbaby','parentobjordinal','parentobjonset','parentobjoffset','parentobjobj1','parentobjobj2','parentobjobj3','parentactionsordinal','parentactionsonset','parentactionsoffset','parentactionscode01'};
end
%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
framebyframeexport = table(dataArray{1:end-1}, 'VariableNames', varNames);

